import hashlib
import time

class Block:
    def __init__(self, index, timestamp, data, previous_hash=''):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.nonce = 0
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        value = str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash) + str(self.nonce)
        return hashlib.sha256(value.encode()).hexdigest()

    def mine_block(self, difficulty):
        target = '0' * difficulty
        print(f"‚õèÔ∏è Mining Block {self.index}...")
        start_time = time.time()

        while self.hash[:difficulty] != target:
            self.nonce += 1
            self.hash = self.calculate_hash()

        end_time = time.time()
        duration = end_time - start_time
        print(f"‚úÖ Block {self.index} mined!")
        print(f"‚è±Ô∏è Time taken: {duration:.4f} seconds")
        print(f"üîÅ Nonce attempts: {self.nonce}")
        print(f"üßæ Hash: {self.hash}\n")

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 4  # Hash must start with "0000"

    def create_genesis_block(self):
        genesis = Block(0, time.time(), "Genesis Block", "0")
        genesis.mine_block(self.difficulty)
        return genesis

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, data):
        previous_block = self.get_latest_block()
        new_block = Block(len(self.chain), time.time(), data, previous_block.hash)
        new_block.mine_block(self.difficulty)
        self.chain.append(new_block)

    def display_chain(self):
        for block in self.chain:
            print(f"Index: {block.index}")
            print(f"Data: {block.data}")
            print(f"Hash: {block.hash}")
            print(f"Previous Hash: {block.previous_hash}")
            print(f"Nonce: {block.nonce}")
            print("-" * 60)


my_blockchain = Blockchain()
my_blockchain.add_block("Block 1 - Transactions")
my_blockchain.add_block("Block 2 - More Transactions")

print("\nüìú Blockchain:")
my_blockchain.display_chain()
